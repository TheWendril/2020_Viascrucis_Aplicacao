{"remainingRequest":"/home/wendril/Desktop/viascrucis/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/wendril/Desktop/viascrucis/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/wendril/Desktop/viascrucis/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wendril/Desktop/viascrucis/src/components/send_history.vue?vue&type=template&id=7a65ec6d&scoped=true&","dependencies":[{"path":"/home/wendril/Desktop/viascrucis/src/components/send_history.vue","mtime":1605644449743},{"path":"/home/wendril/Desktop/viascrucis/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wendril/Desktop/viascrucis/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/wendril/Desktop/viascrucis/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wendril/Desktop/viascrucis/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}